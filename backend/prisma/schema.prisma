generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Conversation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  participantIds String[]
  messages       Chat[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([participantIds])
}

model Chat {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  senderId       String
  receiverId     String
  message        String
  timestamp      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@index([senderId, receiverId])
  @@index([conversationId])
}

model Class {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  subjects Subject[]
  Course   Course[]
  Test     Test[]
}

model Subject {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  class     Class      @relation(fields: [classId], references: [id])
  classId   String
  tests     Test[]
  Material  Material[]
}

model Material {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  userId    String
  subjectId String
  classId   String
  fileUrl   String?  @db.String
  fileName  String?  @db.String
  fileType  String?  @db.String
  fileSize  Int?     @db.Int
  owner     User     @relation(fields: [userId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String              @unique
  classname          String
  password           String
  phonenumber        String              @unique
  role               String              @default("student")
  courses            Course[]
  tests              Test[]
  hostedMeetings     Meeting[]           @relation("HostedMeetings")
  meetingParticipant MeetingParticipant[]
  Material           Material[]
  Question           Question[]
  Answer             Answer[]
  TestAttempt        TestAttempt[]
  Book               Book[]
  ChatMessages       ChatMessage[]
  videos             Video[]
}

model MeetingParticipant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  meetingId String   @db.ObjectId
  userId    String   @db.ObjectId
  meeting   Meeting  @relation(fields: [meetingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  joinedAt  DateTime @default(now())

  @@unique([meetingId, userId])
}

model Meeting {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId        String   @unique
  title         String
  description   String?
  status        String   @default("ACTIVE")
  hostId        String   @db.ObjectId
  host          User     @relation("HostedMeetings", fields: [hostId], references: [id])
  participants  MeetingParticipant[]
  dates         MeetingDate[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model MeetingDate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  meetingId String   @db.ObjectId
  meeting   Meeting  @relation(fields: [meetingId], references: [id])
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  answers   Answer[]
}

model Answer {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  userId     String
  questionId String?
  owner      User      @relation(fields: [userId], references: [id])
  question   Question? @relation(fields: [questionId], references: [id])
}

model Course {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  userId      String
  description String
  img         String
  classId     String
  owner       User   @relation(fields: [userId], references: [id])
  class       Class  @relation(fields: [classId], references: [id])
}

model Test {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  title       String   @unique
  mentorId    String
  assetUrl    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  classId     String
  subjectId   String
  owner       User     @relation(fields: [mentorId], references: [id])
  class       Class    @relation(fields: [classId], references: [id])
  subject     Subject  @relation(fields: [subjectId], references: [id])
  attempts    TestAttempt[]
  questions   TestQuestion[]
}

model TestQuestion {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  testId      String
  question    String
  test        Test             @relation(fields: [testId], references: [id])
  submissions TestSubmission[]
}

model TestSubmission {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  attemptId   String
  questionId  String
  answer      String
  submittedAt DateTime @default(now())
  attempt     TestAttempt  @relation(fields: [attemptId], references: [id])
  question    TestQuestion @relation(fields: [questionId], references: [id])
}

model TestAttempt {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  testId      String
  startedAt   DateTime @default(now())
  completedAt DateTime?
  score       Int?
  user        User  @relation(fields: [userId], references: [id])
  test        Test  @relation(fields: [testId], references: [id])
  submissions TestSubmission[]
}

model Book {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  fileName    String
  filePath    String
  localFilePath String?
  pageCount   Int
  uploadedBy  String
  cloudinaryPublicId String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [uploadedBy], references: [id])
  chatMessages ChatMessage[]
}

model ChatMessage {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  bookId  String
  userId  String
  message String
  response String
  book    Book     @relation(fields: [bookId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
}

model Video {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  category       String   @default("Other")
  videoUrl       String
  thumbnailUrl   String?
  duration       Float    @default(0)
  views          Int      @default(0)
  cloudinaryId   String?
  localFilePath  String?
  uploadedBy     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [uploadedBy], references: [id])
}
